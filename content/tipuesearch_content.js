var tipuesearch = {"pages": [{'title': 'About', 'text': '\xa0\xa0 倉儲連結 \xa0', 'tags': '', 'url': 'About.html'}, {'title': 'HW', 'text': '', 'tags': '', 'url': 'HW.html'}, {'title': 'w6', 'text': '抽點程式 \n # 從 Brython 的 browser 模組導入 document 與 html 程式庫\nfrom browser import document, html\nimport random\n\n# 利用 document 物件, 以索引 "brython_div1" 取得已經位於 html 網頁中 id="brython_div1" 的位置, 且對應到 brython_div1 變數\nbrython_div1 = document["brython_div1"]\n# 可以用三個單引號或三個雙引號標註多行註解\n# 其中的 html 物件有許多建立 html 超文件內容的方法, 以下分別建立\n# BUTTON 按鈕, BR 跳行 (break), 以及 A 網站連結 (Anchor)\n# <= 是 Brython 程式語言的特殊符號, 專用於將 html 超文件資料送給網頁對應變數\n"""\nbrython_div1 <= html.BUTTON("hello")\nbrython_div1 <= html.BR()\nbrython_div1 <= html.A("google", href="https://google.com")\n"""\ntry:\n    c = document.query["c"]\nexcept:\n    c = "1a"\n# 將 1b.txt 資料從 Github Pages 網頁中取下\nurl = "https://mde.tw/studlist/2022fall/" + c + ".txt"\n# 利用 open() 開啟網頁, 利用 read() 讀取網頁內容\n# 然後利用 split() 方法, 利用跳行符號對資料進行切割, 切割後的資料結構為 list\n# list 資料結構以 [] 區隔, 表示資料為數列, 其起始的索引值為 0\ndata = open(url).read().split("\\n")\n# 將每一位學員的靜態網頁共同的網路連結部分設為字串, 且與 mdecp2022 變數對應\nmdecp2022 = "https://mdecp2022.github.io/site-"\n# 因為取下的資料第一筆為標題, 而最後一筆為空字串, 可以利用 Brython 的數列索引取值範圍將索引 0 與最後一個數列值去除\ndata = data[1:-1]\n\ntry:\n    num = document.query["num"]\n    random.shuffle(data)\nexcept:\n    pass\n\n# 利用 for 重複迴圈逐一取出 data 數列中的值, 然後以 \\t, 也就是 tab 符號切割\nfor i in data[:5]:\n    stud = i.split("\\t")\n    # 第一欄位為學號\n    stud_num = stud[0]\n    # 第二欄未為 github 帳號\n    github_acc = stud[1]\n    #print(stud_num, github_acc)\n    # 若沒有找到 github 帳號, 以學號作為帳號\n    if github_acc == "":\n        github_acc = stud_num\n    # 將靜態網頁共同連結的變數與各自的 github 帳號, 組成完整的各學員靜態網頁連結\n    site = mdecp2022 + github_acc\n    # 利用 A 物件產生連結, 然後放入 id="brython_div1 所在的網頁位置\n    link = html.A(stud_num, href=site)\n    brython_div1 <= link\n    # 每一筆資料列出後, 以 break 標註跳行\n    brython_div1 <= html.BR() \n \n \n \n', 'tags': '', 'url': 'w6.html'}, {'title': 'w15', 'text': '\n \n \n \n 為何學習計算機程式需要建立個人倉儲? A:可以知道自己在甚麼時候做了甚麼改動，都會有紀錄 \n 全球資訊網能夠提供甚麼功能或有什麼優點? A:網頁 主要是文字檔案 格式化 和 超文件標示語言 （HTML）。除了格式化文字之外， 網頁還可能包含 圖片 、 影片 、 聲音 和軟體元件，這些元件會在使用者的網頁瀏覽器中呈現為 多媒體 內容的連貫頁面。 透過一種易於使用和靈活的格式，使資訊在網際網路上傳播。 \n Replit, stud.cycu.org 與 localhost 分別代表甚麼? A: 1.Replit:別人創的線上 集成開發環境服務的公司，一定要上網 \xa0 \xa0 2.stud.cycu.org:學校開的 \xa0 \xa0 3.localhost:是一個在電腦網路中用於表示「此電腦」的主機名。 \n https, ssh 到底提供使用者那些功能或優點 ? A: https : HTTP 全名是\xa0 超文本傳輸協定 。 可以 支持網頁瀏覽器和網頁伺服器之間的安全傳輸 ，目\xa0 \xa0 \xa0 \xa0標是防止盜取和篡改傳輸數據。 \xa0 \xa0  \xa0ssh : 已先在電腦內設定好金鑰，上傳時不需要輸入額外帳密。 優點為其傳輸的數據是經過\xa0 \xa0 \xa0壓縮的，所以可以加快傳輸的速度。 並且許多作業系統，包含 macOS, Linux, OpenBSD,\xa0 \xa0 \xa0 \xa0FreeBSD 都支援 SSH。 \n Brython 與 Python 有甚麼差別? A: Brython 的目標是用 Python 取代 Javascript \n 能夠直接在瀏覽器中以 Brython 繪製中華民國國旗, 或模擬綠色方塊在方塊格點中任意移動, 代表甚麼? A:感覺這程式好強 \n 變數, 字串, 整數, 浮點數, 數列, Tuple, Dictionary, 函式, 重複迴圈, class, 物件導向, 資料庫, 這些名詞對您而言代表甚麼? A:完完全全聽不懂的單字 \n \n', 'tags': '', 'url': 'w15.html'}, {'title': 'w15-2', 'text': '綠色方塊 \n \n \n \n \n \n', 'tags': '', 'url': 'w15-2.html'}, {'title': 'w14', 'text': '', 'tags': '', 'url': 'w14.html'}, {'title': 'w14-2', 'text': '\n \n \n 取使用者輸入 \n 心得:我成功做出按鈕了 \n \n \n', 'tags': '', 'url': 'w14-2.html'}, {'title': 'w13', 'text': '溫度轉換程式 \n \'\'\'\nf=c*9/5+32\nc=(f-32)*5/9\n\'\'\'\nc=input("請輸入攝氏溫度值")\n#print(type(c))\nc=float(c)\nprint(c, c*9/5+32) \n w13_temp_ex2 \n \'\'\'\nf=c*9/5+32\nc=(f-32)*5/9\n\'\'\'\nc=input("請輸入攝氏溫度值")\nprint(type(c))\nc=float(c)\nprint("你輸入的攝氏溫度:" + str(c) , "等於華氏溫度:" + str(c*9/5+32)) \n \n \n 心得:終於做出溫度轉換的程式了，逐漸了解該怎麼做了 \n', 'tags': '', 'url': 'w13.html'}, {'title': 'w12', 'text': 'ex1 \n \n # Brython 的 input() 可以接受輸入提示字串, 跳出瀏覽器輸入表單後, 將輸入內容以字串取回\nuser_input_temp = input("請輸入攝氏溫度值:")\n# 接著列出 user_input_temp 變數的資料型別\nprint(type(user_input_temp)) \n ex2 \n # Brython 的 input() 可以接受輸入提示字串, 跳出瀏覽器輸入表單後, 將輸入內容以字串取回\nuser_input_temp = input("請輸入攝氏溫度值:")\n# 接著列出 user_input_temp 變數的資料型別\nprint(type(user_input_temp))\n# 到這裡已知利用 input() 函式將傳回字串, 接著以 float() 將字串轉為浮點數\nuser_input_temp = float(user_input_temp)\n# 因為攝氏溫度乘上 9/5 之後再加上 32 就可以得到對應的華氏溫度值\nFahrenheit = (user_input_temp*9/5) + 32\n# 到這裡, Fahrenheit 資料型別為浮點數, 而 user_input_temp 在第 8 行也轉為浮點數\n# 要將兩個浮點數與字串相加, 都必須透過 str() 轉為字串\nprint("攝氏 " + str(user_input_temp) + " 度, 等於華氏 " + str(Fahrenheit) + " 度.") \n 心得:努力的補上進度', 'tags': '', 'url': 'w12.html'}, {'title': 'Brython', 'text': 'https://en.wikipedia.org/wiki/Python_(programming_language) \n Examples: \n https://gist.github.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d \n https://www.geeksforgeeks.org/python-programming-examples/ \n https://www.programiz.com/python-programming/examples \n https://www.freecodecamp.org/news/python-code-examples-sample-script-coding-tutorial-for-beginners/ \n Python Tutorial: \n https://docs.python.org/3/tutorial/ \n An informal introduction to Python \n Indentation \n Variables \n Comments \n Numbers \n Strings \n print \n Python control flow tools \n for \n if \n range \n open \n read \n lists \n tuples \n dictionaries \n functions \n try ... except \n break \n pass \n classes \n 這個頁面 demo 如何在同一頁面下納入多個線上 Ace 編輯器與執行按鈕 ( practice_html.txt  動態頁面超文件). \n practice_html.txt  動態頁面超文件應該可以在啟動 Brython 時, 設定將 .py 檔案放入 downloads/py 目錄中引用. \n 亦即將所有對應的 html 也使用 Brython 產生, 然後寫為  class  後, 在範例導入時透過  instance  引用. \n <!-- 啟動 Brython -->\n<script>\nwindow.onload=function(){\nbrython({debug:1, pythonpath:[\'./../cmsimde/static/\',\'./../downloads/py/\']});\n}\n</script> \n 從 1 累加到 100: \n 1 add to 100 \n 將 iterable 與 iterator  相關說明 , 利用 Brython 與 Ace Editor 整理在這個頁面. \n  導入 brython 程式庫  \n \n \n \n \n  啟動 Brython  \n \n \n \n  導入 FileSaver 與 filereader  \n \n \n \n \n  導入 ace  \n \n \n \n \n \n \n  導入 gearUtils-0.9.js Cango 齒輪繪圖程式庫  \n \n \n \n \n \n \n  請注意, 這裡使用 Javascript 將 localStorage["kw_py_src1"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱 \n \n \n \n \n \n \n  add 1 to 100 開始  \n \n \n  add 1 to 100 結束 \n  editor1 開始  \n  用來顯示程式碼的 editor 區域  \n \n  以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合  \n  存擋表單開始  \n Filename:  .py   \n  存擋表單結束  \n \n  執行與清除按鈕開始  \n Run   Output   清除輸出區 清除繪圖區 Reload \n  執行與清除按鈕結束  \n \n  程式執行 ouput 區  \n \n  Brython 程式執行的結果, 都以 brython_div1 作為切入位置  \n \n  editor1 結束   ##########################################  \n 從 1 累加到 100 part2: \n 1 add to 100 cango_three_gears BSnake AI Tetris \n  請注意, 這裡使用 Javascript 將 localStorage["kw_py_src2"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱 \n \n \n \n  add 1 to 100 part2 開始  \n \n \n  add 1 to 100 part2 結束 \n  editor2 開始  \n  用來顯示程式碼的 editor 區域  \n \n  以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合  \n  存擋表單開始  \n Filename:  .py   \n  存擋表單結束  \n \n  執行與清除按鈕開始  \n Run   Output   清除輸出區 清除繪圖區 Reload \n  執行與清除按鈕結束  \n \n  程式執行 ouput 區  \n \n  Brython 程式執行的結果, 都以 brython_div1 作為切入位置  \n \n  editor2 結束  \n \n \n', 'tags': '', 'url': 'Brython.html'}]};